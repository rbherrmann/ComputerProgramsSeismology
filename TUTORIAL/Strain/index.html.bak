<html>
<head>
<title>strainspulse96</title>
<style>
pre {
  background-color: rgb(230,230,230);
  margin-top:12px;
  margin-bottom:12px;
  margin-left:6px;
}
</style>
</head>
<body bgcolor="#FFFFFF">
<h1>Introduction</h2>
<p>
</p>
<h1>Theory</h1>
<p>
The theory describing the creation of Green's functions using modal superposition and an extension to compute stress and strain is given in <a href="strain.pdf?"> strain.pdf</a>.
</p>
<h2>strainspulse96</h2>
<p>
This program was built upon two programs in the Comptuer Programs in Seismology package: <b>spulse96</b> and <b>f96tosac</b>. Thus it maintains the functionality of the compined use of those two programs. In addition strains and stresses can be computed.
</p>
<p>As with <b>spulse96</b> the surface wave eigenfunctions must be computed using the 
<b>sprep96, sdisp96, sregn96, slegn96</b> sequence. The command is given by the following
</p>
<p>
<pre>
uake: ~ rbh$ strainspulse96 -h
 spulse96:Help
 USAGE: strainspulse96 -d Distance_File  [ -t -o -p -i ] [-a alpha] -l L [ -D -V -A]  [-F rfile ] [ -m mult] [-STEP|-IMP]  [-FUND] [-HIGH] [-Z]  [-LAT] [-2] [ -M mode ] [-LOCK] -FMT ifmt 
  [-M0 moment ] [-MW mw] [-STK stk -DIP dip -RAKE rake] [-FX fx -FY fy -FZ fz]  [-XX Mxx ... -ZZ Mzz] [-?] [-h]
 TIME FUNCTION SPECIFICATION
  -t           Triangular pulse of base 2 L dt
  -p           Parabolic Pulse of base  4 L dt
               -p -l 1 recommended
  -l L         (default 1 )duration control parameter
  -o           Ohnaka pulse with parameter alpha
  -i           Dirac Delta function
  -a alpha     Shape parameter for Ohnaka pulse
  -F rfile     User supplied pulse
  -m mult      Multiplier (default 1.0)
  -STEP        (default)
  -IMP         
               By default the source time function is 
               steplike. -IMP forces impulse like. -D -IMP is Green s function
 OUTPUT FILE NAME
  The format for the name of the output attempts to
  give information on epicentral distance (km), 
  source depth (km), and receiver depth(km). The options are
  -FMT 1      DDDDDd_HHHh_ZZZz.cmp
              e.g. 005001_1234_0045.Uz
  -FMT 2      DDDDDddd_HHHhhh_ZZZzzz.cmp
              e.g. 00500123_123456_004578.Erf
  -FMT 3      DDDDDdHHHh.grn
              e.g. 0050010041.ZVF
  -FMT 4      DDDDdHHHh.grn
              e.g. 050010045.Srz
  -FMT 5      DDDdddHhhh.grn
              e.g. 5001234578.Err
  where D is for epicentral distance, H source depth, and
  Z receiver depth. The lower case indicates the digits 
  to the right of the decimal place.  The examples above
  are for an epicentral distance is 500.123 km, source
  depth 123.456 km and receiver depth 4.578 km.
 OUTPUT TIMESERIES FOR SOURCE as Ur, Ut, Uz components with strain, stress optional
  -D           Output is ground displacment        (m)
  -V           Output is ground velocity (default) (m/s)
  -A           Output is ground acceleration       (m/s^2)
  -STRESS (default .false. ) output stress for mechanism
     units are Pa, with suffix Srr, Srf, Srz, Stt, Sfz, Szz
  -STRAIN (default .false. ) output strain for mechanism
    with suffix, Err, Erf, Erz, Eff, Efz, Ezz
  -TEST1  (default .false.) output CPS Green functions ,e.g.,
       ZDS RDS ... RHF THF for use with moment tensor codes
       and gsac MT command. This is equivalent to 
       spulse96 -V -p -l 1 | f96tosac -G if -FMT 4 is used 
       with strainspulse96
 COMPUTATIONS
  -d Distance_File {required}    Distance control file 
    This contains one of more lines with following entries
    DIST(km) DT(sec) NPTS T0(sec) VRED(km/s) 
              first time point is T0 + DIST/VRED
              VRED=0 means do not use reduced travel time, e.g.
              500.0 0.25 512 -23.33 6.0
              500.0 0.25 512  60    0.0 
              both have first sample at travel time of 60s
  -LAT        (default false) Laterally varying eigenfunctions
  -2          (default false) Use double length  internally
  -M  nmode   (default all) mode number to compute[0=fund,1=1st]
  -Z          (default false) zero phase triangular/parabolic pulse
  -FUND       (default all) fundamental modes only  
  -HIGH       (default all) all higher modes only  
  -LOCK       (default false) locked mode used  
 SOURCE MECHANISM SPECIFICATION
  -DIP dip               dip of fault plane
  -STK Strike            strike of fault plane
  -RAKE Rake              slip angle on fault plane
  -M0 Moment (def=1.0) Seismic moment in units of dyne-cm
  -MW mw            Moment Magnitude  
             moment (dyne-cm) from log10 Mom = 16.10 + 1.5 Mw
               For strie,dip,rake source mw or Moment must be specified
  -EX                  Explosion
  -AZ Az                Source to Station Azimuth
  -BAZ Baz               Station to Source azimuth
  -fx FX -fy Fy -fZ fz  Point force amplitudes  (N,E,down) in  dynes
  -XX Mxx -YY Myy -ZZ Mzz  Moment tensor elements in units of
  -XY Mxy -XZ Mxz -YZ Myz    dyne-cm
  The moment tensor coordinates are typically X = north Y = east and Z = down
  If by accident more thant one source specification is used,
  the heirarchy is Mij &gt; Strike,dip,rake &gt; Explosion &gt; Force
 --------------------------------------------------------------
 NOTE: The output units are related tot he model specification.
 To have the desired units the model must be in KM, KM/S  and GM/CM^3
 --------------------------------------------------------------
  -?           Write this help message
  -h           Write this help message
</pre>
This is an extensive on-line help, however the example provided in the validation code shows how easy it is to run. 
</p>
<h2>Validation tests</h2>
<h3>Moment tensor source</h3>
<p>
The validation code is contained in <a href="teststrain.tgz">teststrain.tgz</a>. This uses the codes distributed in Computer Programs in Seismology. However to make the PNG graphics used here the ImagaMagick <b>convert</b> program is used. ImageMagick is available for macOS and LINUX.  To unpack and run the tests, 
<br>
<pre>
gunzip -c teststrain.tgz | tar xf -

cd CPSstrain
(cd SWkm;
	(cd SW00;DOITSW)
	(cd SWZ+;DOITSW)
	(cd SWZ-;DOITSW)
	(cd SWR+;DOITSW)
	(cd SWR-;DOITSW)
)
(cd WKkm;
	(cd WK00;DOITWK)
	(cd WKZ+;DOITWK)
	(cd WKZ-;DOITWK)
	(cd WKR+;DOITWK)
	(cd WKR-;DOITWK)
)
DOSTRAINCMP
</pre>
</p>
<p>Using <b>spulse96</b> and <b>f96tosac</b>, it creates surface wave modal superposition Green's functions  in the <i>SWkm</i> directory for epicentral distances of 499.5 (sub-directory SWR-), 500.0 (sub-directory SW00) an 500.5 (sub-directory SWR+) km and
receiver depths of 1.0 km (SW00), 0.5 km (SWZ-) and 1.5 km (SWZ+). 
</p>
<p>
Similar computations are done using wavenumber integration in the directory WKkm and subdirectories WK00, WKZ-, WKZ+, WKR- and WKR+. These are complete solutions which include P waves and near-field terms. The purpose is to compare the surface-wave synthetics to the complete solution.
</p>
<p>
The final script <i>DOSTRAINCMP</i> runs <i>DOITSW</i> in the NEW directory. After defining the model and generating the eigengunctions and dispersion, the follwing command is run:
<pre>
<b>strainspulse96</b><i> -V -p -l 1 -d dfile -MW 2.6 -STK 0 -DIP 45 -RAKE 90 -AZ 22.5 -STRESS -STRAIN -FMT 1 </i>
</pre>
The following files in Sac format are created:
<pre>
005000_0100_0010.Eff	005000_0100_0010.Ezz	005000_0100_0010.Srz
005000_0100_0010.Efz	005000_0100_0010.Sff	005000_0100_0010.Szz
005000_0100_0010.Erf	005000_0100_0010.Sfz	005000_0100_0010.Ur
005000_0100_0010.Err	005000_0100_0010.Srf	005000_0100_0010.Ut
005000_0100_0010.Erz	005000_0100_0010.Srr	005000_0100_0010.Uz
</pre>
</p>
<p>
The <i>DOSTRAINCMP</i>, then runs the scripts <i>DOSTRAINF</I> in the SWkm and WKkm directories.
Those scripts create synthetics for a given mechanism, moment and azimuth, and then numerically differentiates these to give the strains. The values used for the <i>dR</i>, <i>dZ</i> snd <i>dAz</i>  are appropraite for the sampling interval and source pulse duration used.  The next figures compare the three estimates of ground velocity and strain.

</p>
<p>
<table>
<tr>
	<td>
	<center>Predicted velocity in m/s</center>
        <br>
	<img src="U.png">
	<hr>
	</td>
</tr>
<tr>
	<td>
	<center>Predicted strain</center>
        <br>
	<img src="E1.png">
	<hr>
	</td>
</tr>
<tr>
	<td>
	<center>Predicted strain</center>
        <br>
	<img src="E2.png">
	<hr>
	</td>
</tr>
<tr>
	<td><center>
In these figures the red curves were created by <b>strainspulse96</b> in the NEW directory, the black by modal superposition in the SWkm directory, and the blue by wavenumber integration in the WKkm directory. The black and blue colored strain values were computed by numerical differentiation. These figures highlight the fact that the modal superposition synthetics cannot descripe the signals betwen P and S. The slight difference in strain using <b>strainspulse96</b> and the numerical differentiation are due to the approximate nature of the numerical method. If a longer source pulse were used, these difference would be significantly less.
	</center>
	</td>
</tr>
</table>
</p>
<h3>Point force test</h3>
<p>
In this case the response to a point force fx=Fy=fz=1.0e+15 dyne is computed.
The validation code is contained in <a href="teststrain.tgz">teststrain.tgz</a>. To unpack and run the tests,
<br>
<pre>
gunzip -c teststrain.tgz | tar xf -

cd CPSstrain
(cd SWkm;
	(cd SW00;DOITSW)
	(cd SWZ+;DOITSW)
	(cd SWZ-;DOITSW)
	(cd SWR+;DOITSW)
	(cd SWR-;DOITSW)
)
(cd WKkm;
	(cd WK00;DOITWK)
	(cd WKZ+;DOITWK)
	(cd WKZ-;DOITWK)
	(cd WKR+;DOITWK)
	(cd WKR-;DOITWK)
)                         [note the above steps were executed in the previous example]
DOSTRAINCMPF
</pre>
</p>
<p>
<p>
The final script <i>DOSTRAINCMPF</i> runs <i>DOITSWF</i> in the NEW directory. After defining the model and generating the eigengunctions and dispersion, the follwing command is run:
<pre>
<b>strainspulse96</b><i>-V -p -l 1 -d dfile -fx ${F1} -fy ${F2} -fz ${F3} -STRESS -STRAIN -AZ ${AZ}  -FMT 1
 </i>
</pre>
As above the following files in Sac format are created:
<pre>
005000_0100_0010.Eff	005000_0100_0010.Ezz	005000_0100_0010.Srz
005000_0100_0010.Efz	005000_0100_0010.Sff	005000_0100_0010.Szz
005000_0100_0010.Erf	005000_0100_0010.Sfz	005000_0100_0010.Ur
005000_0100_0010.Err	005000_0100_0010.Srf	005000_0100_0010.Ut
005000_0100_0010.Erz	005000_0100_0010.Srr	005000_0100_0010.Uz
</pre>
</p>
<p>
The <i>DOSTRAINCMPF</i>, then runs the scripts <i>DOSTRAINF</I> in the SWkm and WKkm directories.
Those scripts create synthetics for a given mechanism, moment and azimuth, and then numerically differentiates these to give the strains. The values used for the <i>dR</i>, <i>dZ</i> snd <i>dAz</i>  are appropraite for the sampling interval and source pulse duration used.  The next figures compare the three estimates of ground velocity and strain.

</p>
<p>
<table>
<tr>
	<td>
	<center>Predicted velocity in m/s</center>
        <br>
	<img src="UF.png">
	<hr>
	</td>
</tr>
<tr>
	<td>
	<center>Predicted strain</center>
        <br>
	<img src="E1F.png">
	<hr>
	</td>
</tr>
<tr>
	<td>
	<center>Predicted strain</center>
        <br>
	<img src="E2F.png">
	<hr>
	</td>
</tr>
<tr>
	<td><center>
In these figures the red curves were created by <b>strainspulse96</b> in the NEW directory, the black by modal superposition in the SWkm directory, and the blue by wavenumber integration in the WKkm directory. The black and blue colored strain values were computed by numerical differentiation. These figures highlight the fact that the modal superposition synthetics cannot descripe the signals betwen P and S. The slight difference in strain using <b>strainspulse96</b> and the numerical differentiation are due to the approximate nature of the numerical method. If a longer source pulse were used, these difference would be significantly less.
	</center>
	</td>
</tr>
</table>
</p>
<p>
This comparison is fairly good, except for the wavenumebr integration estimate of the <i>Eff</i> = <i>E<sub>&phi;&phi;</sub></i> component. The dominant contribution to this the <i>u<sub>r</sub></i>. Perhaps the near-field terms ignored int he modal superposition is important in this case.
<h2>Units </h2>
<p>
Synthetic seismogram code runs on the basis of numerical values given for the model. The code has no sense of physical units. <b>strainspulse96</b> is tailored to the use of KM, KM/S and GM/CM<sup>3</sup> for depth, velocity and density. The epicentral distances, and source/receiver depths are also assumed to be KM.  Internally the code corrects everything to MKS units, e.g.,
M, KG/M<sup>3</sup>, S units so that the strain and stress are correctly computed. On
output the units are
<pre>
Uz, Ur, Ut      -D flag     displacement in meters
                -V flag     velocity     in meters/s
                -A flag     acceleration in meters/s/s
Err ... Ezz     -STRAIN     dimensionless (meter/meter)
Srr ... Szz     -STRESS     stress       in Pa
</pre>
</p>
<h2>The code</h2>
<p>
After some further testing, <b>strainspulse96</b> will be part of the Computer Programs in Seismology distribution. To make this tool available, you will need to download
<a href="strainspulse96.f">strainspulse96.f</a>,
<a href="makeadd.txt">makeadd.txt</a> and
<a href="makeall.txt">makeall.txt</a>, and perform the following steps:
</p>
<p>
<pre>
cd PROGRAMS.330/VOLIII/src

[copy the strainspusle96.f to this directory]
[carefully edit the  Makefile to change the lines
all: sprep96 sdisp96 \
	sdpsrf96 sdpegn96 sdpder96 \
	slegn96 sregn96 \
	slat2d96 \
	spulse96 \
	scomb96 \
	sdpdsp96 \
	sdprad96 \
	sdpspc96 \
	srfgrd96 \
	tprep96  tdisp96  tregn96  tlegn96  tdpsrf96  tdpegn96  tdpder96 tpulse96  tcomb96 \
	clean

to

all: sprep96 sdisp96 \
	sdpsrf96 sdpegn96 sdpder96 \
	slegn96 sregn96 \
	slat2d96 \
	spulse96 \
	scomb96 \
	sdpdsp96 \
	sdprad96 \
	sdpspc96 \
	srfgrd96 \
	tprep96  tdisp96  tregn96  tlegn96  tdpsrf96  tdpegn96  tdpder96 tpulse96  tcomb96 \
	strainspulse96 \
	clean

Finally change the section

spulse96:       spulse96.o $(SSUBS) f96subf.o lgstr.o $(GETMOD) $(MCHDEP) $(MCHCMD)
        $(FCMP) spulse96.o $(SSUBS) f96subf.o lgstr.o $(GETMOD) $(MCHDEP) $(MCHCMD) -o spulse96
        mv spulse96 $(DEST)


scomb96:        scomb96.o $(SSUBS) $(MCHDEP) $(MCHCMD)
        $(FCMP) scomb96.o $(SSUBS) $(MCHDEP) $(MCHCMD) -o scomb96
        mv scomb96 $(DEST)

to

spulse96:       spulse96.o $(SSUBS) f96subf.o lgstr.o $(GETMOD) $(MCHDEP) $(MCHCMD)
        $(FCMP) spulse96.o $(SSUBS) f96subf.o lgstr.o $(GETMOD) $(MCHDEP) $(MCHCMD) -o spulse96
        mv spulse96 $(DEST)

strainspulse96: strainspulse96.o sacsubf.o $(SSUBS) f96subf.o lgstr.o $(GETMOD) $(MCHDEP) $(MCHCMD)
	$(FCMP) strainspulse96.o sacsubf.o $(SSUBS) f96subf.o lgstr.o $(GETMOD) $(MCHDEP) $(MCHCMD) -o strainspulse96
	mv strainspulse96 $(DEST)

scomb96:        scomb96.o $(SSUBS) $(MCHDEP) $(MCHCMD)
        $(FCMP) scomb96.o $(SSUBS) $(MCHDEP) $(MCHCMD) -o scomb96
        mv scomb96 $(DEST)


</pre>
Note that in the Makefile there are no leading spaces. The offset are due to a TAB.
</p>
<p>
Now
<pre>
make all

or

make strainspulse96 clean
</pre>
</p>


</p>
<center>Last changed January 18, 2021</center>
</body>
</html>
